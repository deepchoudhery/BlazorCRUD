@page "/children/delete"
@inject NewDbContext DB
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Child</h4>
    <hr />
    @if (child is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@child.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Annoying</dt>
            <dd class="col-sm-10">@child.Annoying</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Birthday</dt>
            <dd class="col-sm-10">@child.Birthday</dd>
        </dl>
        <EditForm method="post" Model="child" OnValidSubmit="DeleteChild" FormName="delete">
            <button type="submit" class="btn btn-danger" disabled="@(child is null)">Delete</button> |
            <a href="/children">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Child? child;

    [SupplyParameterFromQuery]
    public int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        child = await DB.Child.FirstOrDefaultAsync(m => m.ID == ID);

        if (child is null)
        {
            // Need a way to trigger a 404 here
            // https://github.com/dotnet/aspnetcore/issues/45654
        }
    }

    public async Task DeleteChild()
    {
        DB.Child.Remove(child!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/children");
    }
}
